#!/bin/bash
set -e

echo "üåç Bienvenue dans le setup du DevContainer Framework !"

# 1Ô∏è‚É£ ‚Äî Collecte d‚Äôinfos
read -p "Nom du projet (ex: myapp) : " RAW_PROJECT_NAME
read -p "Type d‚Äôenvironnement (node/nextjs/python) [node] : " PROJECT_TYPE
read -p "URL du repo Git √† cloner (facultatif) : " REPO_URL
read -p "Chemin o√π stocker le launcher local (par d√©faut : /Volumes/TeraSSD/Projets_Dev) : " LAUNCHER_BASE
LAUNCHER_BASE=${LAUNCHER_BASE:-/Volumes/TeraSSD/Projets_Dev}

# 2Ô∏è‚É£ ‚Äî Normalisation du nom
PROJECT_NAME=$(echo "$RAW_PROJECT_NAME" | tr '[:upper:]' '[:lower:]' | tr ' ' '_' | tr -cd '[:alnum:]_-')
if [[ ! "$PROJECT_NAME" =~ ^[a-z0-9_-]+$ ]]; then
  echo "‚ùå Nom invalide apr√®s normalisation : \"$PROJECT_NAME\""
  echo "   (autoris√©s : lettres, chiffres, tirets, underscores)"
  exit 1
fi
echo "‚úÖ Nom du projet normalis√© : $PROJECT_NAME"

# 3Ô∏è‚É£ ‚Äî D√©finition des chemins
VOLUME_NAME="devcontainer_${PROJECT_NAME}_workspace"
TMP_DIR="/tmp/${PROJECT_NAME}_template"
LAUNCHER_DIR="${LAUNCHER_BASE}/${PROJECT_NAME}"

# 4Ô∏è‚É£ ‚Äî Cr√©ation du volume Docker
echo "üì¶ Cr√©ation du volume Docker : $VOLUME_NAME"
docker volume create "$VOLUME_NAME" >/dev/null

# 5Ô∏è‚É£ ‚Äî T√©l√©chargement du template depuis GitHub
echo "‚¨áÔ∏è  T√©l√©chargement du template DevContainer ($PROJECT_TYPE)..."
mkdir -p "$TMP_DIR"
curl -fsSL "https://raw.githubusercontent.com/MaksTinyWorkshop/devcontainer-framework/main/templates/${PROJECT_TYPE}/.devcontainer/devcontainer.json" \
  -o "$TMP_DIR/devcontainer.json"
curl -fsSL "https://raw.githubusercontent.com/MaksTinyWorkshop/devcontainer-framework/main/templates/${PROJECT_TYPE}/.devcontainer/Dockerfile" \
  -o "$TMP_DIR/Dockerfile"
curl -fsSL "https://raw.githubusercontent.com/MaksTinyWorkshop/devcontainer-framework/main/templates/${PROJECT_TYPE}/.devcontainer/compose.dev.yml" \
  -o "$TMP_DIR/compose.dev.yml"

# 6Ô∏è‚É£ ‚Äî Remplacement du placeholder DEVPROJECT
find "$TMP_DIR" -type f -exec sed -i.bak "s/DEVPROJECT/${PROJECT_NAME}/g" {} + && find "$TMP_DIR" -name "*.bak" -delete

# 7Ô∏è‚É£ ‚Äî Copie du DevContainer dans le volume Docker
echo "üìÇ Copie du DevContainer dans le volume..."
docker run --rm -v "$VOLUME_NAME":/workspace -v "$TMP_DIR":/tmp/template alpine \
  sh -c "mkdir -p /workspace/.devcontainer && cp -r /tmp/template/* /workspace/.devcontainer && chown -R 1000:1000 /workspace"

# 8Ô∏è‚É£ ‚Äî Clonage du d√©p√¥t Git (si fourni)
if [ -n "$REPO_URL" ]; then
  echo "üì• Clonage du d√©p√¥t Git dans le volume..."
  docker run --rm -v "$VOLUME_NAME":/workspace alpine sh -c "
    apk add --no-cache git >/dev/null 2>&1 &&
    git clone '$REPO_URL' /workspace/${PROJECT_NAME} &&
    chown -R 1000:1000 /workspace/${PROJECT_NAME}
  "
fi

# 9Ô∏è‚É£ ‚Äî Cr√©ation du launcher local
echo "üß© Cr√©ation du launcher local..."
mkdir -p "$LAUNCHER_DIR/.vscode"
cp -r "$TMP_DIR" "$LAUNCHER_DIR/.devcontainer"

# Fichier .code-workspace
cat <<EOF > "$LAUNCHER_DIR/.vscode/devcontainer-launcher.code-workspace"
{
  "folders": [
    { "path": "." }
  ],
  "settings": {
    "remote.containers.workspaceMount": "source=${VOLUME_NAME},target=/workspace,type=volume",
    "remote.containers.workspaceFolder": "/workspace"
  },
  "extensions": [
    "ms-vscode-remote.remote-containers"
  ]
}
EOF

# üîü ‚Äî Nettoyage du template temporaire
rm -rf "$TMP_DIR"

# 11Ô∏è‚É£ ‚Äî Message final
echo "‚úÖ Setup termin√© !"
echo "üìÅ Launcher local : $LAUNCHER_DIR"
echo ""
echo "‚û°Ô∏è  Ouvre ton DevContainer avec :"
echo "   code \"$LAUNCHER_DIR\""
echo ""

read -p "Souhaitez-vous ouvrir VS Code maintenant ? (Y/n) " OPEN_NOW
if [[ "$OPEN_NOW" =~ ^[Yy]$ || -z "$OPEN_NOW" ]]; then
  echo "üöÄ Ouverture de VS Code..."
  code "$LAUNCHER_DIR"
else
  echo "üëã Vous pourrez ouvrir le conteneur plus tard avec la commande ci-dessus."
fi